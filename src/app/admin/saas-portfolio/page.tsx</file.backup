'use client';

import { Bar, BarChart, ResponsiveContainer, XAxis, YAxis, Tooltip } from 'recharts';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { getStatusBadge } from "@/components/status-badges";
import { useProductsData, useProvidersData, useOpportunitiesData, useServicesData, useStaffData } from '@/hooks/use-data-hooks';
import { Skeleton } from '@/components/ui/skeleton';


const ChartCard = ({ title, data, dataKey, color }: { title: string, data: any[], dataKey: string, color: string }) => (
    <Card>
        <CardHeader><CardTitle>{title}</CardTitle></CardHeader>
        <CardContent className="h-[200px]">
            <ResponsiveContainer width="100%" height="100%">
                <BarChart data={data}>
                    <XAxis dataKey="name" stroke="#888888" fontSize={12} tickLine={false} axisLine={false}/>
                    <YAxis stroke="#888888" fontSize={12} tickLine={false} axisLine={false} tickFormatter={(value) => `${value}`}/>
                    <Tooltip />
                    <Bar dataKey={dataKey} fill={color} radius={[4, 4, 0, 0]}/>
                </BarChart>
            </ResponsiveContainer>
        </CardContent>
    </Card>
);

export default function AdminDashboardPage() {
    const { data: products, isClient: isProductsClient } = useProductsData();
    const { data: providers, isClient: isProvidersClient } = useProvidersData();
    const { data: opportunities, isClient: isOpportunitiesClient } = useOpportunitiesData();
    const { data: services, isClient: isServicesClient } = useServicesData();
    const { leadership, staff, agentCategories, isClient: isStaffClient } = useStaffData();
    
    const isClient = isProductsClient && isProvidersClient && isOpportunitiesClient && isServicesClient && isStaffClient;

    const kpiData = [
        { name: 'Products', value: products.length },
        { name: 'Providers', value: providers.length },
        { name: 'Opportunities', value: opportunities.length },
        { name: 'Services', value: services.length },
        { name: 'AI Agents', value: agentCategories.reduce((acc, cat) => acc + cat.agents.length, 0) },
        { name: 'Staff', value: leadership.length + staff.length },
    ];
    
    const recentProviders = providers.slice(0, 5);

    return (
        <div className="space-y-8">
            <div>
                <h1 className="text-3xl font-bold">Admin Dashboard</h1>
                <p className="text-muted-foreground">
                    A high-level overview of the Innovative Enterprises ecosystem.
                </p>
            </div>
             <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
               <ChartCard title="Ecosystem Overview" data={kpiData} dataKey="value" color="hsl(var(--primary))" />
               <Card className="lg:col-span-2">
                    <CardHeader>
                        <CardTitle>Recently Joined Partners</CardTitle>
                        <CardDescription>A list of the newest providers in your network.</CardDescription>
                    </CardHeader>
                    <CardContent>
                        <Table>
                            <TableHeader><TableRow><TableHead>Name</TableHead><TableHead>Services</TableHead><TableHead>Status</TableHead></TableRow></TableHeader>
                            <TableBody>
                                {!isClient ? (
                                    Array.from({ length: 5 }).map((_, index) => (
                                        <TableRow key={index}>
                                            <TableCell colSpan={3}><Skeleton className="h-8 w-full" /></TableCell>
                                        </TableRow>
                                    ))
                                ) : (
                                    recentProviders.map(provider => (
                                        <TableRow key={provider.id}>
                                            <TableCell className="font-medium">{provider.name}</TableCell>
                                            <TableCell>{provider.services}</TableCell>
                                            <TableCell>{getStatusBadge(provider.status)}</TableCell>
                                        </TableRow>
                                    ))
                                )}
                            </TableBody>
                        </Table>
                    </CardContent>
               </Card>
            </div>
        </div>
    );
}