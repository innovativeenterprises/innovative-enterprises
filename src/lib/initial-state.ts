
import { getProducts, getStoreProducts, getServices, getProviders, getOpportunities, getClients, getTestimonials, getPricing, getPosProducts, getDailySales, getStages, getAssets, getInvestors, getProperties, getStairspaceListings, getStairspaceRequests, getLeases, getStockItems, getGiftCards, getStudents, getCommunities, getCommunityEvents, getCommunityFinances, getCommunityMembers, getAlumniJobs, getRentalAgencies, getCars, getCostSettings, getBeautyCenters, getBeautyServices, getBeautySpecialists, getBeautyAppointments, getUsedItems, getSettings, getKnowledgeBase, getApplications, getBriefcase, getSolutions, getIndustries, getAiTools, getSaasProducts, getCfoData, getStaffData, getRaahaData, getBeautyData } from './firestore';
import { initialSettings } from './settings';
import { initialBriefcase } from './briefcase';
import type { AppState } from './global-store';


export const getEmptyState = (): Omit<AppState, 'isClient'> => ({
  settings: initialSettings,
  cart: [],
  products: [],
  storeProducts: [],
  providers: [],
  opportunities: [],
  services: [],
  signedLeases: [],
  stairspaceRequests: [],
  stairspaceListings: [],
  leadership: [],
  staff: [],
  agentCategories: [],
  raahaAgencies: [],
  raahaWorkers: [],
  raahaRequests: [],
  beautyCenters: [],
  beautyServices: [],
  beautySpecialists: [],
  beautyAppointments: [],
  costSettings: [],
  assets: [],
  usedItems: [],
  clients: [],
  testimonials: [],
  giftCards: [],
  students: [],
  communities: [],
  communityEvents: [],
  communityFinances: [],
  communityMembers: [],
  alumniJobs: [],
  rentalAgencies: [],
  cars: [],
  posProducts: [],
  dailySales: [],
  saasProducts: [],
  stockItems: [],
  pricing: [],
  stages: [],
  applications: [],
  briefcase: initialBriefcase,
  investors: [],
  knowledgeBase: [],
  cfoData: null,
  properties: [],
  solutions: [],
  industries: [],
  aiTools: [],
});

export const getInitialState = async (): Promise<AppState> => {
    try {
        const [
            settings, products, storeProducts, providers, opportunities, services, signedLeases,
            stairspaceRequests, stairspaceListings, staffData, raahaData, beautyData,
            costSettings, assets, usedItems, clients, testimonials, giftCards, students,
            communities, communityEvents, communityFinances, communityMembers, alumniJobs,
            rentalAgencies, cars, posProducts, dailySales, saasProducts, stockItems,
            pricing, stages, applications, briefcase, investors, knowledgeBase, cfoData,
            properties, solutions, industries, aiTools
        ] = await Promise.all([
            getSettings(), getProducts(), getStoreProducts(), getProviders(), getOpportunities(),
            getServices(), getLeases(), getStairspaceRequests(), getStairspaceListings(),
            getStaffData(), getRaahaData(), getBeautyData(), getCostSettings(), getAssets(),
            getUsedItems(), getClients(), getTestimonials(), getGiftCards(), getStudents(),
            getCommunities(), getCommunityEvents(), getCommunityFinances(), getCommunityMembers(),
            getAlumniJobs(), getRentalAgencies(), getCars(), getPosProducts(), getDailySales(),
            getSaasProducts(), getStockItems(), getPricing(), getStages(), getApplications(),
            getBriefcase(), getInvestors(), getKnowledgeBase(), getCfoData(), getProperties(),
            getSolutions(), getIndustries(), getAiTools()
        ]);

        return {
            isClient: false,
            settings: settings,
            products: products,
            storeProducts: storeProducts,
            providers: providers,
            opportunities: opportunities,
            services: services,
            signedLeases: signedLeases,
            stairspaceRequests: stairspaceRequests,
            stairspaceListings: stairspaceListings,
            leadership: staffData.leadership,
            staff: staffData.staff,
            agentCategories: staffData.agentCategories,
            raahaAgencies: raahaData.raahaAgencies,
            raahaWorkers: raahaData.raahaWorkers,
            raahaRequests: raahaData.raahaRequests,
            beautyCenters: beautyData.beautyCenters,
            beautyServices: beautyData.beautyServices,
            beautySpecialists: beautyData.beautySpecialists,
            beautyAppointments: beautyData.beautyAppointments,
            costSettings: costSettings,
            assets: assets,
            usedItems: usedItems,
            clients: clients,
            testimonials: testimonials,
            giftCards: giftCards,
            students: students,
            communities: communities,
            communityEvents: communityEvents,
            communityFinances: communityFinances,
            communityMembers: communityMembers,
            alumniJobs: alumniJobs,
            rentalAgencies: rentalAgencies,
            cars: cars,
            posProducts: posProducts,
            dailySales: dailySales,
            saasProducts: saasProducts,
            stockItems: stockItems,
            pricing: pricing,
            stages: stages,
            applications: applications,
            briefcase: briefcase || initialBriefcase,
            investors: investors,
            knowledgeBase: knowledgeBase,
            cfoData: cfoData,
            properties: properties,
            solutions: solutions,
            industries: industries,
            aiTools: aiTools,
        };
    } catch (error) {
        console.error("Failed to fetch initial state:", error);
        return getEmptyState() as AppState;
    }
};
